load("@bazel_gazelle//:def.bzl", "gazelle")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@io_bazel_rules_go//go:def.bzl", "nogo")
load("//lint:go_config.bzl", "go_lint_config")
load("//lint/private/python:flake8_config.bzl", "flake8_lint_config")
load("//:nogo.bzl", "nogo_deps")
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
load("@cgrindel_bazel_starlib//updatesrc:defs.bzl", "updatesrc_update_all")


load("@rules_python//python:defs.bzl", "py_runtime_pair")

# py_runtime(
#     name = "my_py2_runtime",
#     interpreter_path = "/system/python2",
#     python_version = "PY2",
# )
#
py_runtime(
    name = "my_py3_runtime",
    interpreter_path = "/home/cywu/.pyenv/versions/3.9.19/bin/python3.9",
    python_version = "PY3",
)

py_runtime_pair(
    name = "my_py_runtime_pair",
    # py2_runtime = ":my_py2_runtime",
    py3_runtime = ":my_py3_runtime",
)

toolchain(
    name = "my_toolchain",
    # target_compatible_with = <...>,
    toolchain = ":my_py_runtime_pair",
    toolchain_type = "@rules_python//python:toolchain_type",
)

# gazelle:prefix github.com/scionproto/scion
# gazelle:map_kind go_library go_library //lint:go.bzl
# gazelle:map_kind go_test go_test //lint:go.bzl
gazelle(name = "gazelle")

go_lint_config(
    name = "go_lint_config",
    exclude_filter = [
        "mock_",
        ".pb.go",
        ".gen.go",
    ],
    visibility = [
        "//visibility:public",
    ],
)

flake8_lint_config(
    name = "flake8_lint_config",
    config_file = ".flake8",
    visibility = [
        "//visibility:public",
    ],
)

# This is the SCION distributable package. It contains all (binary) services,
# and the required tools.
pkg_tar(
    name = "scion",
    srcs = [
        "//go/co",
        "//go/colibri-cmd",
        "//go/cs",
        "//go/daemon",
        "//go/dispatcher",
        "//go/posix-gateway",
        "//go/posix-router",
        "//go/scion",
        "//go/scion-pki",
        "//go/tools/pathdb_dump",
    ],
    mode = "0755",
    package_dir = "",
)

# This contains all of the binaries needed to run CI (integration & acceptance
# tests)
pkg_tar(
    name = "scion-ci",
    srcs = [
        "//go/acceptance/sig_ping_acceptance",
        "//go/integration/braccept",
        "//go/integration/colibri",
        "//go/integration/end2end",
        "//go/integration/end2end_integration",
        "//go/integration/scion_integration",
        "//go/lib/xtest/graphupdater",
        "//go/pktgen",
        "//go/tools/buildkite_artifacts",
        "//go/tools/udpproxy",
    ],
    mode = "0755",
    package_dir = "",
)

# This contains all of the binaries needed to run the topology generator.
pkg_tar(
    name = "scion-topo",
    srcs = [
        "//go/scion-pki",
    ],
    mode = "0755",
    package_dir = "",
)

# This is a package of tools used for linting the source code.
pkg_tar(
    name = "lint",
    srcs = [
        "@buf_bin//file:buf",
        "@com_github_client9_misspell//cmd/misspell",
        "@com_github_jeanmertz_lll//cmd/lll",
    ],
    mode = "0755",
    package_dir = "",
)

# Nogo - Go code analysis tool
nogo(
    name = "nogo",
    config = "nogo.json",
    visibility = ["//visibility:public"],
    deps = nogo_deps,
)

buildifier(
    name = "buildifier",
)

buildifier(
    name = "buildifier_check",
    mode = "check",
)

# Runs all update_src targets in this Workspace.
updatesrc_update_all(
    name = "update_all",
)
